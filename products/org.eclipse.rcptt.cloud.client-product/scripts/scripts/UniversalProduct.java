/********************************************************************************
 * Copyright (c) 2011 Xored Software Inc and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Xored Software Inc - initial API and implementation
 ********************************************************************************/
package scripts;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.jar.Attributes;
import java.util.jar.Attributes.Name;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.stream.Stream;

public class UniversalProduct {
	private final Path configurationOutput = Paths.get("repository", "configuration");
	
	private static final String CONFIG_INI = """
			eclipse.application=com.xored.q7.cloud.client.headless
			eclipse.p2.data.area=@config.dir/../p2
			eclipse.p2.profile=DefaultProfile
			org.eclipse.equinox.simpleconfigurator.configUrl=file\\:org.eclipse.equinox.simpleconfigurator/bundles.info
			osgi.bundles=reference\\:file\\:org.eclipse.equinox.simpleconfigurator_1.5.200.v20240209-1053.jar@1\\:start
			osgi.bundles.defaultStartLevel=4
			""";

	public static void main(String[] args) {
		UniversalProduct universalProduct = new UniversalProduct();
		universalProduct.combineBundles();
		universalProduct.writeConfig();
	}

	private void writeConfig() {
		Properties properties = new Properties();
		try {
			properties.load(new StringReader(CONFIG_INI));
			properties.put("osgi.bundles",
					"reference:file:org.eclipse.equinox.simpleconfigurator_1.5.200.v20240209-1053.jar@1:start");
			properties.put("osgi.framework", "file:plugins/org.eclipse.osgi_3.19.0.v20240213-1246.jar");
			try (OutputStream output = Files.newOutputStream(configurationOutput.resolve("config.ini"))) {
				properties.store(output, "Generated by " + getClass().getName());
			}

		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}

	public void combineBundles() {
		PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(
				"glob:products/**/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info");
		Path outputPath = configurationOutput.resolve(Paths.get("org.eclipse.equinox.simpleconfigurator",
				"bundles.info"));
		try {
			Files.createDirectories(outputPath.getParent());
			Path root = Path.of("");
			try (BufferedWriter writer = Files.newBufferedWriter(outputPath, StandardCharsets.UTF_8);
					Stream<Path> walk = Files.walk(root)) {
				walk.forEach(inputPath -> {
					if (!pathMatcher.matches(inputPath)) {
						return;
					}
					try (BufferedReader reader = Files.newBufferedReader(inputPath, StandardCharsets.UTF_8)) {
						for (String line = reader.readLine(); line != null; line = reader.readLine()) {
							if (!line.startsWith("#")) {
								String path = bundleToPath(line);
								Manifest manifest = readManifest(Paths.get("repository").resolve(path));
								Attributes mainAttributes = manifest.getMainAttributes();
								if (mainAttributes.get(new Name("Eclipse-PlatformFilter")) != null) {
									continue;
								}
							}
							writer.write(line);
							writer.write("\n");
						}
					} catch (Exception e) {
						throw new IllegalStateException("Failed to process " + inputPath, e);
					}
				});
			}
		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}

	public static String bundleToPath(String entry) {
		return entry.split(",")[2];
	}

	private static Manifest readManifest(Path bundlePath) {
		try {
			if (!Files.exists(bundlePath)) {
				bundlePath = bundlePath.getParent().resolve(bundlePath.getFileName().toString() + ".jar");
			}
			try (JarFile jar = new JarFile(bundlePath.toFile())) {
				Manifest manifest = jar.getManifest();
				if (manifest == null) {
					manifest = new Manifest();
				}
				return manifest;
			}
		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}
}